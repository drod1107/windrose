datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  email           String           @unique
  password        String
  role            UserRole
  profile         Profile?
  managedClients  Users[]           @relation("CaseManagerToClient")
  caseManager     Users?            @relation("CaseManagerToClient", fields: [caseManagerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  caseManagerId   String?          @db.ObjectId
  journey         Journey?
  interactions    Interaction[]
  aiConversations AIConversation[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum UserRole {
  CLIENT
  CASE_MANAGER
  ADMIN
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model systemServices {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  v               Int     @map("__v")
  name            String
  serviceUrl      String?
  serviceId       String?
  serviceKey      String?
  servicePassword String?
  servicePort     String?
  description     String?
}

model Journey {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  client    Users     @relation(fields: [clientId], references: [id])
  clientId  String   @unique @db.ObjectId
  legs      Leg[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Leg {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  journey     Journey  @relation(fields: [journeyId], references: [id])
  journeyId   String   @db.ObjectId
  title       String
  description String
  smartGoal   String
  steps       Step[]
  isCompleted Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Step {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  leg          Leg           @relation(fields: [legId], references: [id])
  legId        String        @db.ObjectId
  title        String
  description  String
  resources    Resource[]    @relation(fields: [resourceIds], references: [id])
  resourceIds  String[]      @db.ObjectId
  contacts     Contact[]     @relation(fields: [contactIds], references: [id])
  contactIds   String[]      @db.ObjectId
  order        Int
  isCompleted  Boolean       @default(false)
  interactions Interaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Resource {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  type        String // e.g., "form", "doc", "url"
  content     String
  steps       Step[]   @relation(fields: [stepIds], references: [id])
  stepIds     String[] @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  phone     String?
  role      String
  steps     Step[]   @relation(fields: [stepIds], references: [id])
  stepIds   String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Interaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  step      Step     @relation(fields: [stepId], references: [id])
  stepId    String   @db.ObjectId
  type      String // e.g., "view", "complete", "comment"
  content   String?
  createdAt DateTime @default(now())
}

model AIConversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      Users     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  messages  Json[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}